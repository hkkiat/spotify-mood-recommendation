scalar GraphQLDate

# TYPES FOR MOODLOG

type CommonResponse {
  message: String!
  extra: String
}

type MoodLog {
  _id: ID!
  email: String!
  logdatetime: GraphQLDate!
  overallfeeling: String!
  happinesslevel: Float!
  mostimpact: String!
}

input InputMoodLog {
  email: String!
  logdatetime: GraphQLDate!
  overallfeeling: String!
  happinesslevel: Float!
  mostimpact: String!
}

# Spotify
type AuthData {
  userId: String!
  accessToken: String!
  refreshToken: String!
  expiresAt: GraphQLDate!
}

type Artist {
  id: String!
  name: String!
  topTracks: [Track!]!
}

type Track {
  id: String!
  name: String!
  artists: [Artist!]!
  valence: Float
  danceability: Float
  energy: Float
}

type Playlist {
  id: String!
  name: String!
  tracks: [Track!]!
}

type UserSession {
  token: String!
  email: String!
  timestamp: String!
  isActive: Boolean!
}

type Query {
  # Query to retrieve all moodlogs for person
  getAllMoodLogs(email: String!): [MoodLog]
  	# Query to retrieve all moodlogs for person
  getExistingMoodLog(email: String!, date: GraphQLDate!): MoodLog
	getUserFavorites(userId: String!): [Artist]
  dummyLoginCheck: CommonResponse!  
  retrieveUserSession(token: String!): UserSession
}

type Mutation {
	# Mutation to create a day's moodlog for person
	createMoodLog(moodlog: InputMoodLog!): MoodLog
  updateMoodLog(moodlog: InputMoodLog!): MoodLog
	# Spotify mutations
	authorize(code: String!): AuthData
  refreshAccessToken(userId: String!): AuthData
  createPlaylistBasedOnFavoritesFinal(userId: String!, moodvalue: Float!): Playlist!
  login(email: String!, password: String!): CommonResponse!
  register(email: String!, password: String!): CommonResponse!
  logout: CommonResponse!
  storeUserSession(token: String!, email: String!, timestamp: String!): UserSession
}
