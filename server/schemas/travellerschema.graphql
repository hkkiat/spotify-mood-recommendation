scalar GraphQLDate

type Ticket {
	_id: ID!
	id: Int!
	name: String!
	phone: Int!
	gender: String!
	isMember: String!
	bookingTime: GraphQLDate!
}

input InputTicket {
	name: String!
	phone: Int!
	gender: String!
	isMember: String!
	bookingTime: GraphQLDate!
}

# TYPES FOR MOODLOG

type MoodLog {
  _id: ID!
  email: String!
  logdatetime: GraphQLDate!
  overallfeeling: String!
  happinesslevel: Int!
  mostimpact: ImpactEnum!
}

enum ImpactEnum {
  FAMILY
  FRIENDS
  WORK
  LIFE
  STUDY
}

input InputMoodLog {
  email: String!
  logdatetime: GraphQLDate!
  overallfeeling: String!
  happinesslevel: Int!
  mostimpact: ImpactEnum!
}

type Query {
	# Query to retrieve all moodlogs for person
  	getAllMoodLogs(email: String!): [MoodLog]
	listTravellers:[Ticket]!
	findBlackListTraveller(
		travellername: String,
		travellerphone: Int): Boolean!
}

type Mutation {
	# Mutation to create a day's moodlog for person
	createMoodLog(moodlog: InputMoodLog!): MoodLog
	addTraveller(ticket: InputTicket!): Ticket!
	deleteTraveller(travellername: String!): Boolean!
	blacklistTravellerName(travellername: String!): Boolean
	blacklistTravellerPhone(travellerphone: Int!): Boolean
}

